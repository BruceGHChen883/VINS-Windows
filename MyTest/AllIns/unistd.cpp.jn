#include "stdafx.h"
#include "unistd.h"

void SleepC(double dMicroSeconds)
{
	__int64 nFreq = 0; //频率
	__int64 nStart = 0; //起始计数

	if (QueryPerformanceCounter((LARGE_INTEGER*)&nStart)
		&& QueryPerformanceFrequency((LARGE_INTEGER*)&nFreq)
		&& nFreq > 0
		)
	{
		__int64 nEnd = 0; //终止计数
		double k = 1000000.0 / (double)nFreq; //将计数转换为微秒
		for (;;)
		{
			QueryPerformanceCounter((LARGE_INTEGER*)&nEnd);
			if (dMicroSeconds <= (double)(nEnd - nStart) * k)
			{
				break;
			}
		}
	}
}

int wgettimeofday(struct timeval *tp, void *tzp)
{
	time_t clock;
	struct tm tm;
	SYSTEMTIME wtm;
	GetLocalTime(&wtm);
	tm.tm_year = wtm.wYear - 1900;
	tm.tm_mon = wtm.wMonth - 1;
	tm.tm_mday = wtm.wDay;
	tm.tm_hour = wtm.wHour;
	tm.tm_min = wtm.wMinute;
	tm.tm_sec = wtm.wSecond;
	tm.tm_isdst = -1;
	clock = mktime(&tm);
	tp->tv_sec = clock;
	tp->tv_usec = wtm.wMilliseconds * 1000;
	return (0);
}

